{"version":3,"sources":["components/ChatInput/index.tsx","components/ChatInputWrapper/index.tsx","components/Chatbox/index.tsx","components/ChatHistoryWrapper/index.tsx","components/ChatHistory/index.tsx","components/ChatMessage/index.tsx","components/Chat/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ChatInput","_ref","handleSubmit","_useState","useState","_useState2","Object","slicedToArray","inputValue","setInputValue","react_default","a","createElement","onSubmit","event","preventDefault","className","placeholder","value","onChange","target","ChatInputWrapper","children","Chatbox","ChatHistoryWrapper","ChatHistory","ChatMessage","key","message","isOwner","Chat","state","messages","setMessages","_this","push","console","log","setState","handleNewOwnerMessage","_callee","regenerator_default","wrap","_context","prev","next","stop","components_Chatbox","components_ChatHistoryWrapper","components_ChatHistory","this","map","index","components_ChatMessage","components_ChatInputWrapper","components_ChatInput","React","Component","App","Chat_Chat","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+ZA8BeA,SA1BG,SAAAC,GAA0B,IAAvBC,EAAuBD,EAAvBC,aAAuBC,EACNC,mBAAS,IADHC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACnCK,EADmCH,EAAA,GACvBI,EADuBJ,EAAA,GAc1C,OACEK,EAAAC,EAAAC,cAAA,QAAMC,SARS,SAACC,GAChBA,EAAMC,iBAENb,EAAaM,GACbC,EAAc,MAKZC,EAAAC,EAAAC,cAAA,SACEI,UAAU,aACVC,YAAY,aACZC,MAAOV,EACPW,SAjBoB,SAACL,GACzBL,EAAcK,EAAMM,OAAOF,aCIhBG,SARU,SAAApB,GAAsB,IAAnBqB,EAAmBrB,EAAnBqB,SAC1B,OACEZ,EAAAC,EAAAC,cAAA,OAAKI,UAAU,sBACZM,KCKQC,SARC,SAAAtB,GAAuB,IAApBqB,EAAoBrB,EAApBqB,SACjB,OACEZ,EAAAC,EAAAC,cAAA,OAAKI,UAAU,WACZM,KCKQE,SARY,SAAAvB,GAAuB,IAApBqB,EAAoBrB,EAApBqB,SAC5B,OACEZ,EAAAC,EAAAC,cAAA,OAAKI,UAAU,wBACZM,KCKQG,SARK,SAAAxB,GAAuB,IAApBqB,EAAoBrB,EAApBqB,SACrB,OACEZ,EAAAC,EAAAC,cAAA,OAAKI,UAAU,gBACZM,KCOQI,eAVK,SAAAzB,GAAoC,IAAjC0B,EAAiC1B,EAAjC0B,IAAKC,EAA4B3B,EAA5B2B,QAC1B,OADsD3B,EAAnB4B,QAG/BnB,EAAAC,EAAAC,cAAA,OAAKe,IAAKA,EAAKX,UAAU,yBAAyBY,GAGlDlB,EAAAC,EAAAC,cAAA,OAAKe,IAAKA,EAAKX,UAAU,0BAA0BY,KCEpCE,6MAEnBC,MAAQ,CACNC,SAAU,MAGZC,YAAc,SAACf,GACb,IAAMc,EAAWE,EAAKH,MAAMC,SAC5BA,EAASG,KAAKjB,GACdkB,QAAQC,IAAI,MAAOL,GACnBE,EAAKI,SAAS,CACZN,SAAUA,OAIdO,4DAAwB,SAAAC,EAAOtB,GAAP,OAAAuB,EAAA9B,EAAA+B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,wBAAAF,EAAAG,SAAAN,oIAStB,OACE9B,EAAAC,EAAAC,cAAA,OAAKI,UAAU,QACbN,EAAAC,EAAAC,cAACmC,EAAD,KACErC,EAAAC,EAAAC,cAACoC,EAAD,KACEtC,EAAAC,EAAAC,cAACqC,EAAD,KAEIC,KAAKnB,MAAMC,SAASmB,IAAI,SAACvB,EAASwB,GAAV,OACtB1C,EAAAC,EAAAC,cAACyC,EAAD,CACE1B,IAAKyB,EACLxB,QAASA,EAAQV,MACjBW,QAASD,EAAQC,cAM3BnB,EAAAC,EAAAC,cAAC0C,EAAD,KACE5C,EAAAC,EAAAC,cAAC2C,EAAD,CACErD,aAAcgD,KAAKX,kCA1CCiB,IAAMC,WCGzBC,0LARX,OACEhD,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACbN,EAAAC,EAAAC,cAAC+C,EAAD,cAJUF,cCOEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a58b2603.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nimport './style.css';\n\nconst ChatInput = ({ handleSubmit }:any) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = (event:any) => {\n    setInputValue(event.target.value);\n  }\n\n  const onSubmit = (event:any) => {\n    event.preventDefault();\n\n    handleSubmit(inputValue);\n    setInputValue('');\n  }\n\n  return (\n    <form onSubmit={onSubmit}>\n      <input\n        className='chat-input'\n        placeholder='Digitar...'\n        value={inputValue}\n        onChange={handleInputChange}\n      />\n    </form>\n  );\n}\n\nexport default ChatInput;\n","import React from 'react';\n\nimport './style.css';\n\nconst ChatInputWrapper = ({ children }:any) => {\n  return (\n    <div className='chat-input-wrapper'>\n      {children}\n    </div>\n  );\n}\n\nexport default ChatInputWrapper;\n","import React from 'react';\n\nimport './style.css';\n\nconst Chatbox = ({ children }: any) => {\n  return (\n    <div className='chatbox'>\n      {children}\n    </div>\n  );\n}\n\nexport default Chatbox;\n","import React from 'react';\n\nimport './style.css';\n\nconst ChatHistoryWrapper = ({ children }: any) => {\n  return (\n    <div className='chat-history-wrapper'>\n      {children}\n    </div>\n  );\n}\n\nexport default ChatHistoryWrapper;\n","import React from 'react';\n\nimport './style.css';\n\nconst ChatHistory = ({ children }: any) => {\n  return (\n    <div className='chat-history'>\n      {children}\n    </div>\n  );\n}\n\nexport default ChatHistory;\n","import React from 'react';\n\nimport './style.css';\n\nconst ChatMessage = ({ key, message, isOwner }: any) => {\n  return isOwner\n    ? (\n      <div key={key} className='chat-message is-owner'>{message}</div>\n    )\n    : (\n      <div key={key} className='chat-message not-owner'>{message}</div>\n    )\n}\n\nexport default ChatMessage;\n","import React from 'react';\n\nimport ChatInput from '../ChatInput';\nimport ChatInputWrapper from '../ChatInputWrapper';\nimport Chatbox from '../Chatbox';\nimport ChatHistoryWrapper from '../ChatHistoryWrapper';\nimport ChatHistory from '../ChatHistory';\nimport './style.css';\nimport ChatMessage from '../ChatMessage';\n\n// import {api} from '../../Connect';\n\nexport default class Chat extends React.Component{\n\n  state = {\n    messages: []\n  };\n\n  setMessages = (value) => {\n    const messages = this.state.messages;\n    messages.push(value);\n    console.log('map', messages);\n    this.setState({\n      messages: messages\n    });\n  };\n\n  handleNewOwnerMessage = async (value: any) => {\n    // const apiMessages = await api.messages.get();\n    // console.log('api', apiMessages);\n    // this.setMessages({ value, isOwner: true });\n    // console.log('val', value);\n    // await api.messages.add({message: value, date: Date.now()})\n  };\n\n  render() {\n    return (\n      <div className='chat'>\n        <Chatbox>\n          <ChatHistoryWrapper>\n            <ChatHistory>\n              {\n                this.state.messages.map((message, index) => (\n                  <ChatMessage\n                    key={index}\n                    message={message.value}\n                    isOwner={message.isOwner}\n                  />\n                ))\n              }\n            </ChatHistory>\n          </ChatHistoryWrapper>\n          <ChatInputWrapper>\n            <ChatInput\n              handleSubmit={this.handleNewOwnerMessage}\n            />\n          </ChatInputWrapper>\n        </Chatbox>\n      </div>\n    );\n  }\n};\n","import React, { Component } from 'react';\n\nimport Chat from './components/Chat';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <Chat />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}