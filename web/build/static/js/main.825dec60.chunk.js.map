{"version":3,"sources":["components/ChatInput/index.tsx","components/ChatInputWrapper/index.tsx","components/Chatbox/index.tsx","components/ChatHistoryWrapper/index.tsx","components/ChatHistory/index.tsx","components/ChatMessage/index.tsx","../../configs/ports.ts","../../configs/base.ts","../../src/utils/main-settings.ts","../../src/utils/endpoint.ts","../../src/utils/api.ts","Connect.ts","../../constants/routes.ts","components/Chat/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ChatInput","_ref","handleSubmit","_useState","useState","_useState2","Object","slicedToArray","inputValue","setInputValue","react_default","a","createElement","onSubmit","event","preventDefault","className","placeholder","value","onChange","target","ChatInputWrapper","children","Chatbox","ChatHistoryWrapper","ChatHistory","ChatMessage","key","message","isOwner","configsPorts","messages","port","site","configsDatabase","host","user","password","database","dialect","main_settings_MainSettings","[object Object]","name","this","configs","module","transports","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","result","done","then","apply","endpoint_Endpoint","socketUri","config","io","lib","entity","method","args","route","query","assign","send","console","log","emit","api_awaiter","api_Api","services","endpoints","realMethods","settings","service","getSocketUrl","getSocketConfig","setProxy","endpoint","Proxy","prop","includes","callback","ev","call","connect","Connect","classCallCheck","api","messagesList","Api","on","init","add","get","Chat","props","_this","possibleConstructorReturn","getPrototypeOf","data","messagesState","state","push","setState","handleNewOwnerMessage","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","date","Date","now","stop","_x","arguments","components_Chatbox","components_ChatHistoryWrapper","components_ChatHistory","map","index","components_ChatMessage","components_ChatInputWrapper","components_ChatInput","React","Component","App","Chat_Chat","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.825dec60.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nimport './style.css';\n\nconst ChatInput = ({ handleSubmit }:any) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = (event:any) => {\n    setInputValue(event.target.value);\n  }\n\n  const onSubmit = (event:any) => {\n    event.preventDefault();\n\n    handleSubmit(inputValue);\n    setInputValue('');\n  }\n\n  return (\n    <form onSubmit={onSubmit}>\n      <input\n        className='chat-input'\n        placeholder='Digitar...'\n        value={inputValue}\n        onChange={handleInputChange}\n      />\n    </form>\n  );\n}\n\nexport default ChatInput;\n","import React from 'react';\n\nimport './style.css';\n\nconst ChatInputWrapper = ({ children }:any) => {\n  return (\n    <div className='chat-input-wrapper'>\n      {children}\n    </div>\n  );\n}\n\nexport default ChatInputWrapper;\n","import React from 'react';\n\nimport './style.css';\n\nconst Chatbox = ({ children }: any) => {\n  return (\n    <div className='chatbox'>\n      {children}\n    </div>\n  );\n}\n\nexport default Chatbox;\n","import React from 'react';\n\nimport './style.css';\n\nconst ChatHistoryWrapper = ({ children }: any) => {\n  return (\n    <div className='chat-history-wrapper'>\n      {children}\n    </div>\n  );\n}\n\nexport default ChatHistoryWrapper;\n","import React from 'react';\n\nimport './style.css';\n\nconst ChatHistory = ({ children }: any) => {\n  return (\n    <div className='chat-history'>\n      {children}\n    </div>\n  );\n}\n\nexport default ChatHistory;\n","import React from 'react';\n\nimport './style.css';\n\nconst ChatMessage = ({ key, message, isOwner }: any) => {\n  return isOwner\n    ? (\n      <div key={key} className='chat-message is-owner'>{message}</div>\n    )\n    : (\n      <div key={key} className='chat-message not-owner'>{message}</div>\n    )\n}\n\nexport default ChatMessage;\n","export const configsPorts = {\n  messages: {\n    port: 4001\n  },\n  site: {\n    port: 9000\n  }\n};\n","export const configsDatabase = {\n  host: 'postgres',\n  user: 'postgres',\n  password: 'postgres',\n  database: 'postgres',\n  dialect: 'postgres',\n  port: 5432\n};\n","import { configsPorts } from '../../configs/ports';\nimport { configsDatabase } from '../../configs/base';\nexport class MainSettings {\n    constructor(name) {\n        this.name = name;\n        this.configs = configsPorts;\n        this.configs.database = configsDatabase;\n    }\n    getSocketUrl(module) {\n        return `ws://localhost:${this.configs[module].port}/`;\n    }\n    getSocketConfig() {\n        return {\n            transports: ['websocket']\n        };\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as io from 'socket.io-client';\nexport class Endpoint {\n    constructor(socketUri, config) {\n        this.config = config;\n        this.io = io.connect(socketUri, config);\n    }\n    call(entity, method, ...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const route = `${entity}.${method}`;\n            const query = Object.assign({}, args[0]);\n            return yield this.send(route, query);\n        });\n    }\n    send(route, query) {\n        console.log('send', route, query);\n        return new Promise((resolve) => {\n            this.io.emit(route, query, resolve);\n        });\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { MainSettings } from './main-settings';\nimport { Endpoint } from './endpoint';\nexport class Api {\n    constructor(services) {\n        this.endpoints = {};\n        this.realMethods = ['on', 'off', 'connect', 'disconnect'];\n        this.settings = new MainSettings();\n        for (const service in services) {\n            this.endpoints.messages = new Endpoint(this.settings.getSocketUrl('messages'), this.settings.getSocketConfig());\n        }\n        this.setProxy();\n    }\n    setProxy() {\n        const endpoint = this.endpoints.messages;\n        const realMethods = this.realMethods;\n        this.messages = new Proxy({}, {\n            get(target, prop) {\n                console.log('handler', target, prop);\n                if (realMethods.includes(prop)) {\n                    return (event, callback) => {\n                        const ev = endpoint.io[prop](event, callback);\n                        console.log('event', event, prop, endpoint, ev);\n                        return ev;\n                    };\n                }\n                return (...args) => __awaiter(this, void 0, void 0, function* () {\n                    const result = yield endpoint.call('messages', prop, ...args);\n                    console.log('result', result);\n                    return result;\n                });\n            }\n        });\n    }\n}\n","import { Api } from \"../../src/utils/api\";\nimport { messages } from \"../../constants/routes\";\n\nclass Connect{\n  api: Api;\n  messagesList: any[] = [];\n  constructor(){\n    this.api = new Api({messages: true});\n  }\n  init(){\n    console.log('init socket');\n    this.api.messages.on('connect', () => {\n      console.log('connect front')\n\n    });\n    // this.api.messages.on(messages.add, (data) => {\n    //   console.log('add from back data', data);\n    //   this.messagesList.push(data);\n    // });\n  }\n}\n\nconst connect = new Connect();\nconnect.init();\nexport const api = connect.api;\nexport const list = connect.messagesList;\n","export const messagesMethods = {\n  'message.add': 'message.add',\n  'message.get': 'message.get'\n};\n\nexport const messages = {\n  add: messagesMethods['message.add'],\n  get: messagesMethods['message.get']\n};\n","import React from 'react';\n\nimport ChatInput from '../ChatInput';\nimport ChatInputWrapper from '../ChatInputWrapper';\nimport Chatbox from '../Chatbox';\nimport ChatHistoryWrapper from '../ChatHistoryWrapper';\nimport ChatHistory from '../ChatHistory';\nimport './style.css';\nimport ChatMessage from '../ChatMessage';\n\nimport {api, list} from '../../Connect';\nimport { messages } from \"../../../../constants/routes\";\n\n\n\nexport default class Chat extends React.Component{\n\n  constructor(props) {\n    super(props);\n    this.init();\n  }\n\n  init = () => {\n    api.messages.on(messages.add, (data) => {\n      console.log('add from back data', data);\n      const messagesState = this.state.messages;\n      messagesState.push({value: data.message, isOwner: true})\n      this.setState({\n        messages: messagesState\n      });\n    });\n  }\n\n  state = {\n    messages: []\n  };\n\n  handleNewOwnerMessage = async (value: any) => {\n    await api.messages.add({message: value, date: Date.now()})\n  };\n\n  render() {\n    return (\n      <div className='chat'>\n        <Chatbox>\n          <ChatHistoryWrapper>\n            <ChatHistory>\n              {\n                this.state.messages.map((message, index) => (\n                  <ChatMessage\n                    key={index}\n                    message={message.value}\n                    isOwner={message.isOwner}\n                  />\n                ))\n              }\n            </ChatHistory>\n          </ChatHistoryWrapper>\n          <ChatInputWrapper>\n            <ChatInput\n              handleSubmit={this.handleNewOwnerMessage}\n            />\n          </ChatInputWrapper>\n        </Chatbox>\n      </div>\n    );\n  }\n};\n","import React, { Component } from 'react';\n\nimport Chat from './components/Chat';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <Chat />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}